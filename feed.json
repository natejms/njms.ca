{"version":"https://jsonfeed.org/version/1","title":"njms blog","items":[{"id":"https://njms.ca/posts/digital-sovereignty.html","url":"https://njms.ca/posts/digital-sovereignty.html","title":"Journey towards Digital sovereignty","content_html":"<p>Until more recently, the idea of digital sovereignty felt fairly foreign to me. Sure, I use lots of open source software, but I remained very technologically dependent in a way. Google's software suite is a good example of this: no matter how hard I tried to avoid Google services, I'm still tethered to the platform in one way or another. Though I've managed to push Google Search out of my life, I keep finding myself using their music streaming platform to listen to podcasts and their operating system on my daily commute.</p>\n<p>However, I've taken it upon myself to push further towards total digital sovereignty. </p>\n","content_text":null,"date_published":"Mon,  5 Feb 2018 12:00:00 +0100","tags":[]},{"id":"https://njms.ca/posts/closures-in-programming.html","url":"https://njms.ca/posts/closures-in-programming.html","title":"Closures in programming: What are they and how do they work?","content_html":"<p>Any avid programmer would likely have heard the term “closure” a handful of times, though many newcomers may struggle trying to understand how they work, or even what they are. Let's take a look at a definition <a href=\"https://en.wikipedia.org/wiki/Closure_(computer_programming)\">taken from Wikipedia</a>:</p>\n<blockquote>\n<p>In programming languages, closures (also lexical closures or function closures) are techniques for implementing lexically scoped name binding in languages with first-class functions.</p>\n</blockquote>\n<p>That’s, well, not very intuitive. To be fair, closures aren’t an incredibly intuitive thing when you define them like that. I’m certain, however, that though breaking this definition down things will become much clearer. Let’s take a look:</p>\n","content_text":null,"date_published":"Thu, 28 Dec 2017 12:00:00 +0100","tags":[]},{"id":"https://njms.ca/posts/modern-js-arrow-functions.html","url":"https://njms.ca/posts/modern-js-arrow-functions.html","title":"Modern JS concepts: Arrow functions, the new and improved function literals","content_html":"<p>In the past, we would see a lot of this:</p>\n<pre style=\"background-color:#2b303b\">\n<span style=\"background-color:#2b303b;color:#8fa1b3;\">someFunction</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">(</span><span style=\"background-color:#2b303b;color:#bf616a;\">param</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">,</span><span style=\"background-color:#2b303b;color:#c0c5ce;\"> </span><span style=\"background-color:#2b303b;color:#b48ead;\">function</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">(</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">)</span><span style=\"background-color:#2b303b;color:#c0c5ce;\"> </span><span style=\"background-color:#2b303b;color:#c0c5ce;\">{</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">\n</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">  </span><span style=\"background-color:#2b303b;color:#65737e;\">//</span><span style=\"background-color:#2b303b;color:#65737e;\"> do something\n</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">}</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">)</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">;</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">\n</span></pre>\n<p>Now, this gets a little bit cumbersome after a while. Not only are function expressions long, they include a kitchen sink of features that you probably won't need in all cases, like the <code>this</code> or a <code>new</code> constructor.</p>\n<p>Thankfully, in EMCAScript 6, we got this whole new and improved arrow function. Let's take a look.</p>\n","content_text":null,"date_published":"Thu, 28 Dec 2017 12:00:00 +0100","tags":[]}],"home_page_url":"https://njms.ca","description":"Programming, web design and lots of blockchain enthusiasm."}