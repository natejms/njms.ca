{"version":"https://jsonfeed.org/version/1","title":"njms blog","items":[{"id":"https://njms.ca/posts/seven-habits-of-highly-efficient-people.html","url":"https://njms.ca/posts/seven-habits-of-highly-efficient-people.html","title":"The 7 Habits of Highly Efficient People","content_html":"<p>If you've been around leftist social media recently, you've probably heard about what some call <a href=\"https://www.epi.org/productivity-pay-gap/\">the productivity pay-gap</a>. Simply put, the productivity pay-gap is the idea that despite a drastic increase in worker productivity since the late 1970s (69.3% to be exact), workers haven't seen nearly as great of an increase in their average hourly pay (just 11.6%). It's no surprise workers are getting more productive: the late 20th century came with enormous technological developments that radicalized the way we work. Today, everything that can be automated <em>is</em> automated, and the number of different tasks we know how to automate only seems to grow by the day. Futurists are split on what this progress will ultimately bring about, but one thing is for sure: we need to change the way we think about work.</p>\n","content_text":null,"date_published":"Sun, 13 Sep 2020 20:00:00 +0100","tags":[]},{"id":"https://njms.ca/posts/yeah-ill-do-it.html","url":"https://njms.ca/posts/yeah-ill-do-it.html","title":"\"Yeah I'll do it\", and why your team sucks","content_html":"<p>Despite the impending threat of a global pandemic, our economy hasn't stopped just yet. While many critical jobs in supply chains have come to a halt, lots of higher level jobs that would have otherwise involved online collaboration are running in full swing. This sort of environment puts all kinds of new pressures on teams, and teams that have thus far chosen not to emphasize the importance of team development are being put to the test. Can YOU survive the pandemic, even with your negligence of team building?</p>\n<p>Well, yeah, probably. You'll survive for all of the wrong reasons.</p>\n","content_text":null,"date_published":"Fri, 15 May 2020 13:00:00 +0100","tags":[]},{"id":"https://njms.ca/posts/the-dark-web-could-be-a-really-great-place.html","url":"https://njms.ca/posts/the-dark-web-could-be-a-really-great-place.html","title":"The dark web could be a really great place.","content_html":"<p>Recently, I've been working on this essay about Tor and the dark web in general. This has really got me thinking about how (or rather, why) the dark web is painted with such a horrid image. Sure, there are black markets operating over Tor Onion Services, but surely there's also plenty of black markets operating on the clearnet, down my street and all across the country.</p>\n<p>So what's the big deal?</p>\n","content_text":null,"date_published":"Sun, 09 Sep 2018 12:00:00 +0100","tags":[]},{"id":"https://njms.ca/posts/closures-in-programming.html","url":"https://njms.ca/posts/closures-in-programming.html","title":"Closures in programming: What are they and how do they work?","content_html":"<p>Any avid programmer would likely have heard the term “closure” a handful of times, though many newcomers may struggle trying to understand how they work, or even what they are. Let's take a look at a definition <a href=\"https://en.wikipedia.org/wiki/Closure_(computer_programming)\">taken from Wikipedia</a>:</p>\n<blockquote>\n<p>In programming languages, closures (also lexical closures or function closures) are techniques for implementing lexically scoped name binding in languages with first-class functions.</p>\n</blockquote>\n<p>That’s, well, not very intuitive. To be fair, closures aren’t an incredibly intuitive thing when you define them like that. I’m certain, however, that though breaking this definition down things will become much clearer. Let’s take a look:</p>\n","content_text":null,"date_published":"Thu, 28 Dec 2017 12:00:00 +0100","tags":[]},{"id":"https://njms.ca/posts/modern-js-arrow-functions.html","url":"https://njms.ca/posts/modern-js-arrow-functions.html","title":"Modern JS concepts: Arrow functions, the new and improved function literals","content_html":"<p>In the past, we would see a lot of this:</p>\n<pre style=\"background-color:#2b303b;\">\n<span style=\"background-color:#2b303b;color:#8fa1b3;\">someFunction</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">(</span><span style=\"background-color:#2b303b;color:#bf616a;\">param</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">, </span><span style=\"background-color:#2b303b;color:#b48ead;\">function</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">() {\n  </span><span style=\"background-color:#2b303b;color:#65737e;\">// do something\n</span><span style=\"background-color:#2b303b;color:#c0c5ce;\">});\n</span></pre>\n<p>Now, this gets a little bit cumbersome after a while. Not only are function expressions long, they include a kitchen sink of features that you probably won't need in all cases, like the <code>this</code> or a <code>new</code> constructor.</p>\n<p>Thankfully, in EMCAScript 6, we got this whole new and improved arrow function. Let's take a look.</p>\n","content_text":null,"date_published":"Thu, 28 Dec 2017 12:00:00 +0100","tags":[]}],"home_page_url":"https://njms.ca","description":"Programming, web design and lots of blockchain enthusiasm."}