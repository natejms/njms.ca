<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel><title>njms blog</title><link>http://localhost:3000</link><description>Programming, web design and lots of blockchain enthusiasm.</description><item><title>The dark web could be a really great place.</title><link>http://localhost:3000/posts/the-dark-web-could-be-a-really-great-place.html</link><description><![CDATA[<p>Recently, I've been working on this essay about Tor and the dark web in general. This has really got me thinking about how (or rather, why) the dark web is painted with such a horrid image. Sure, there are black markets operating over Tor Onion Services, but surely there's also plenty of black markets operating on the clearnet, down my street and all across the country.</p>
<p>So what's the big deal?</p>
]]></description><guid>http://localhost:3000/posts/the-dark-web-could-be-a-really-great-place.html</guid><pubDate>Sun, 09 Sep 2018 12:00:00 +0100</pubDate></item><item><title>Closures in programming: What are they and how do they work?</title><link>http://localhost:3000/posts/closures-in-programming.html</link><description><![CDATA[<p>Any avid programmer would likely have heard the term “closure” a handful of times, though many newcomers may struggle trying to understand how they work, or even what they are. Let's take a look at a definition <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">taken from Wikipedia</a>:</p>
<blockquote>
<p>In programming languages, closures (also lexical closures or function closures) are techniques for implementing lexically scoped name binding in languages with first-class functions.</p>
</blockquote>
<p>That’s, well, not very intuitive. To be fair, closures aren’t an incredibly intuitive thing when you define them like that. I’m certain, however, that though breaking this definition down things will become much clearer. Let’s take a look:</p>
]]></description><guid>http://localhost:3000/posts/closures-in-programming.html</guid><pubDate>Thu, 28 Dec 2017 12:00:00 +0100</pubDate></item><item><title>Modern JS concepts: Arrow functions, the new and improved function literals</title><link>http://localhost:3000/posts/modern-js-arrow-functions.html</link><description><![CDATA[<p>In the past, we would see a lot of this:</p>
<pre style="background-color:#2b303b;">
<span style="background-color:#2b303b;color:#8fa1b3;">someFunction</span><span style="background-color:#2b303b;color:#c0c5ce;">(</span><span style="background-color:#2b303b;color:#bf616a;">param</span><span style="background-color:#2b303b;color:#c0c5ce;">, </span><span style="background-color:#2b303b;color:#b48ead;">function</span><span style="background-color:#2b303b;color:#c0c5ce;">() {
  </span><span style="background-color:#2b303b;color:#65737e;">// do something
</span><span style="background-color:#2b303b;color:#c0c5ce;">});
</span></pre>
<p>Now, this gets a little bit cumbersome after a while. Not only are function expressions long, they include a kitchen sink of features that you probably won't need in all cases, like the <code>this</code> or a <code>new</code> constructor.</p>
<p>Thankfully, in EMCAScript 6, we got this whole new and improved arrow function. Let's take a look.</p>
]]></description><guid>http://localhost:3000/posts/modern-js-arrow-functions.html</guid><pubDate>Thu, 28 Dec 2017 12:00:00 +0100</pubDate></item></channel></rss>
